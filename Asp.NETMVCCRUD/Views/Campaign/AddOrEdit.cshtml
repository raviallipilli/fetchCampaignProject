@using Demo.Enums
@model Demo.Models.Campaign
@{
    Layout = null;
}

@using (Html.BeginForm("AddOrEdit", "Campaign", FormMethod.Post, new { onsubmit = "return SubmitForm(this)" }))
{
    @Html.HiddenFor(model => model.Id)
    <div class="form-group">
        @Html.LabelFor(model => model.Name, new { @class = "control-label" })
        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Client, new { @class = "control-label" })
        @(Model.Client == null ?
                                    @Html.DropDownListFor(model => model.Client, new SelectList(Enum.GetValues(typeof(Client))), "- Please select a client -", new { @class = "form-control" }) :
                                    @Html.DropDownListFor(model => model.Client,
                                           new SelectList(Enum.GetValues(typeof(Client))), "- Please select a client -", new { @class = "form-control", @readonly = "readonly" }))
        @Html.HiddenFor(model => model.Client)
        @Html.ValidationMessageFor(model => model.Client, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Type, new { @class = "control-label" })
        @(Model.Type == null ?
                           @Html.DropDownListFor(model => model.Type, new SelectList(Enum.GetValues(typeof(CampaignType))), "- Please select a type -", new { @class = "form-control" }) :
                           @Html.DropDownListFor(model => model.Type,
                           new SelectList(Enum.GetValues(typeof(CampaignType))), "- Please select a type -", new { @class = "form-control", @readonly = "readonly" }))
        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label" })
        <div class="form-group">
            @(Model.StartDate == null ?
                               @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @Value = (@Model.StartDate == null ? "" : @Model.StartDate.Value.ToString("yyyy-MM-dd")), Type = "date", @class = "form-control" } }) :
                               @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @Value = (@Model.StartDate == null ? "" : @Model.StartDate.Value.ToString("yyyy-MM-dd")), Type = "date", @class = "form-control", @readonly = "readonly" } }) )
            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label" })
        <div class="form-group">
            @(Model.EndDate == null ?
                               @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @Value = (@Model.EndDate == null ? "" : @Model.EndDate.Value.ToString("yyyy-MM-dd")), Type = "date", @class = "form-control" } }) :
                               @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @Value = (@Model.EndDate == null ? "" : @Model.EndDate.Value.ToString("yyyy-MM-dd")), Type = "date", @class = "form-control", @readonly = "readonly" } }) )
            @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <input type="submit" value="Submit" class="btn btn-primary" />
        <input type="reset" value="Reset" class="btn" />
    </div>
}